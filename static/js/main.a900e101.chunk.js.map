{"version":3,"sources":["components/providers/AuthenticationProvider.js","components/RegisterModal.js","components/providers/ApiActions.js","components/LoginForm.js","graphql/Queries.js","graphql/Mutations.js","components/utils/sleep.js","components/providers/GraphQLProvider.js","components/providers/NodeFactory.js","components/providers/TaskProvider.js","components/topsegment/helpers/DataProcessors.js","components/topsegment/helpers/DeleteFunctions.js","components/topsegment/modals/AddClientModal.js","components/topsegment/modals/AddTaskModal.js","components/topsegment/modals/AddSubtaskModal.js","components/topsegment/DropdownSegment.js","components/topsegment/timercomponents/Timer.js","components/topsegment/timercomponents/ConvertToHoursMinutesAndSeconds.js","components/topsegment/timercomponents/TotalTimeDisplay.js","components/topsegment/timercomponents/TimerBox.js","components/topsegment/TopSegment.js","components/nivo/network/hooks.js","components/bottomsegment/slider/Slider.js","components/bottomsegment/slider/SliderDisplay.js","components/bottomsegment/slider/SliderContainer.js","components/bottomsegment/NodeModal.js","components/nivo/network/Node.js","components/nivo/network/AnimatedNodes.js","components/nivo/network/StaticNodes.js","components/nivo/network/Link.js","components/nivo/network/AnimatedLinks.js","components/nivo/network/StaticLinks.js","components/nivo/network/Network.js","components/nivo/network/ResponsiveNetwork.js","components/nivo/network/NetworkCanvas.js","components/bottomsegment/BottomSegment.js","components/App.js","Apollo.js","index.js","components/nivo/network/props.js"],"names":["AuthenticationContext","createContext","RegisterModal","callRegisterEndpoint","active","changeModalState","trigger","password","passwordOnChangeHandler","email","emailOnChangeHandler","resultMsg","Modal","centered","open","Header","Content","Form","Input","required","label","placeholder","onChange","value","type","length","Message","negative","resultMessage","Button","onClick","server","register","axios","post","then","res","data","authenticate","LoginForm","authenticationContext","useContext","useState","modalActive","setEmail","setPassword","setResultMsg","apiSuccess","setApiSuccess","target","a","user","msg","response","message","callAuthenticateEndpoint","updateUserAndLocalStorage","setAuthenticated","className","Segment","Grid","columns","relaxed","stackable","Column","icon","iconPosition","content","primary","verticalAlign","data-testid","size","Divider","vertical","positive","displayError","Queries","ALL_CLIENTS","gql","ALL_TASKS","GET_TASK","ALL_SUBTASKS","ALL_TIMECOMMITS","Mutations","CREATE_CLIENT","DELETE_CLIENT","CREATE_TASK","DELETE_TASK","CREATE_SUBTASK","DELETE_SUBTASK","CREATE_OR_UPDATE_TIMECOMMIT","UPDATE_TIMECOMMIT","sleep","time","Promise","resolve","setTimeout","GraphQLContext","getLink","from","to","getRadius","totalTime","divisor","minRadius","maxRadius","reducedTime","Math","min","max","TaskContext","mapForDropdown","itemName","sort","b","localeCompare","map","el","index","key","text","id","curryDeleteItem","f","setActive","deleteItem","ownerId","callback","callDeleteClient","variables","callDeleteTask","callDeleteSubtask","handleTaskRefetch","AddClientModal","onClose","clientName","setClientName","businessType","setBusinessType","location","setLocation","useMutation","createClient","AddTaskModal","activeClientId","taskName","setTaskName","createTask","AddSubtaskModal","activeTaskId","refetch","subtasks","subtaskName","setSubtaskName","category","setCategory","dependsOnIds","setDependsOnIds","onCompleted","createSubtask","Dropdown","fluid","multiple","selection","options","e","DropdownSegment","modal","items","setActiveItem","addDisabled","deleteDisabled","modalOpen","setModalOpen","dropdownValue","setDropdownValue","handleOpen","handleClose","callDeleteItem","deleteButton","disabled","basic","addButton","Group","compact","horizontal","textAlign","search","isRunning","interval","convertToHoursMinutesAndSecondsDisplay","timeIn","hideSeconds","OneDayMax","hours","remainder","minutes","seconds","hoursLeadingZero","minutesLeadingZero","secondsLeadingZero","floor","TotalTimeDisplay","taskForDisplay","activeTask","tasks","filter","task","Number","Statistic","getResultDisplay","TimerBox","userId","activeSubtaskId","setActiveTask","getTask","setTime","showMessage","setShowMessage","setMessage","createOrUpdateTimeCommit","handleResetTimerClick","clearInterval","returnTime","resetTimer","handleShowMessageStateChange","setInterval","callTimer","color","TopSegment","deleteClient","deleteTask","deleteSubtask","setTasks","setActiveTaskId","setActiveSubtaskId","setActiveClientId","curriedDeleteClient","curriedDeleteTask","curriedDeleteSubtask","useQuery","clientsLoading","loading","clientsError","error","clientsData","clientsRefetch","tasksLoading","tasksError","tasksData","tasksRefetch","console","clients","getMappedClients","getAllClients","getAllTasks","client","getMappedTasks","activeSubtasks","flatMap","getMappedSubtasks","Boolean","useNetwork","nodes","links","linkDistance","repulsivity","distanceMin","distanceMax","center","iterations","currentNodes","setCurrentNodes","currentLinks","setCurrentLinks","useEffect","forces","computedLinkDistance","isNumber","isString","link","get","forceLink","d","distance","charge","forceManyBody","strength","forceCenter","computeForces","nodesCopy","node","linksCopy","source","simulation","forceSimulation","force","stop","tick","previousSource","find","n","previousTarget","useNodeColor","useMemo","useLinkThickness","thickness","Slider","handleSliderChange","onInput","SliderDisplay","date","timeCommitId","displayTime","getTimecommits","onError","updateTime","Date","toDateString","SliderContainer","timeCommit","asSeconds","fiveMinuteIncrements","round","setValue","NodeModal","isOpen","timeCommits","name","messageText","setMessageText","isSuccessMessage","setIsSuccessMessage","successful","Sleep","scrolling","i","Actions","memo","x","y","radius","borderWidth","borderColor","scale","modelOpen","setModelOpen","setTimecommits","setTotalTime","useLazyQuery","subtaskId","fetchPolicy","getAllTimeCommits","calculateTotalTime","item","reduce","total","Fragment","transform","r","fill","strokeWidth","stroke","ConvertToHoursMinutesAndSeconds","willEnter","style","val","willLeave","springConfig","spring","useMotionConfig","styles","interpolatedStyles","sourceX","sourceY","targetX","targetY","strokeLinecap","x1","y1","x2","y2","linkThickness","linkColor","Network","props","width","height","partialMargin","margin","rawNodes","rawLinks","layers","nodeColor","nodeBorderWidth","nodeBorderColor","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","animate","theme","useTheme","getColor","getBorderColor","useInheritedColor","getLinkThickness","getLinkColor","layerById","React","createElement","AnimatedLinks","StaticLinks","AnimatedNodes","StaticNodes","layer","defaultProps","NetworkDefaultProps","withContainer","ResponsiveNetwork","NetworkCanvas","pixelRatio","isInteractive","canvasEl","useRef","getNodeColor","current","ctx","getContext","fillStyle","background","fillRect","translate","left","top","forEach","strokeStyle","lineWidth","beginPath","moveTo","lineTo","arc","PI","ref","cursor","NetworkCanvasDefaultProps","BottomSegment","errorMessage","right","bottom","t","modifiers","depth","motionStiffness","motionDamping","renderMessage","MyResponsiveNetwork","App","authenticated","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","localStorage","getItem","authorization","ApolloClient","concat","cache","InMemoryCache","ReactDOM","render","children","setNodes","setLinks","taskNode","getTaskNode","subtaskNodes","subtask","dependsOn","colour","getSubtaskTaskNode","subtaskNode","dependency","Provider","setUser","setItem","setErrorMessage","parseError","firstColon","indexOf","outputMessage","slice","document","getElementById","commonPropTypes","PropTypes","arrayOf","shape","string","isRequired","oneOfType","oneOf","func","number","inheritedColorPropType","bool","commonDefaultProps","motionPropTypes","Infinity","global","window","devicePixelRatio"],"mappings":"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","file":"static/js/main.a900e101.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\n\nconst AuthenticationContext = createContext();\n\n/**\n * Makes the logged-in user's authentication details and\n * id globally available\n */\nfunction AuthenticationProvider({ children }) {\n    const nullUser = { id: null, token: null };\n    const [authenticated, setAuthenticated] = useState(false);\n    const [user, setUser] = useState(nullUser);\n\n    const updateUserAndLocalStorage = (user) => {\n        localStorage.setItem('token', user.token);\n        setUser(user);\n    }\n\n    return (\n        <AuthenticationContext.Provider value={{ authenticated, setAuthenticated, \n                                                 user, updateUserAndLocalStorage }}>\n            {children}\n        </ AuthenticationContext.Provider>\n    );\n}\n\nexport { AuthenticationContext, AuthenticationProvider };\n\n","import React from 'react';\nimport { Modal, Button, Form, Message } from 'semantic-ui-react'\n\nfunction RegisterModal({ callRegisterEndpoint, active, changeModalState, trigger,\n    password, passwordOnChangeHandler, email, emailOnChangeHandler, resultMsg }) {\n\n    const resultMessage = () => {\n        if (resultMsg.length >= 1) {\n            return (\n                <Message negative>\n                    <Message.Header>{resultMsg}</Message.Header>\n                </Message>\n            );\n        }\n    }\n\n    return (\n        <Modal trigger={trigger} centered={true} open={active} >\n            <Modal.Header>Register</Modal.Header>\n            <Modal.Content>\n                <Form>\n                    <Form.Input required={true}\n                        label={'Username'}\n                        placeholder={'Username'}\n                        onChange={emailOnChangeHandler}\n                        value={email} />\n                    <Form.Input required={true}\n                        label={'Password'}\n                        placeholder={'Password'}\n                        type={'password'}\n                        value={password}\n                        onChange={passwordOnChangeHandler} />\n                    {resultMessage()}\n                    <Button type='submit' onClick={callRegisterEndpoint}>\n                        Submit\n                    </Button>\n                    <Button onClick={changeModalState}>\n                        Close\n                    </Button>\n                </Form>\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nexport default RegisterModal","import axios from 'axios';\n\n/**\n * For making calls to register and/or authenticate with\n * the server in order to get JWT.\n */\nconst server = 'https://newtimetracker-272513.appspot.com';\n\nfunction register(email, password) {\n    // Send post request to register endpoint with\n    // email and password in body \n    const response = axios.post(server + '/register', {email, password})\n        .then(res => res.data);\n\n    return response;\n}\n\nfunction authenticate(email, password) {\n    // Send post request to authenticate endpoint with\n    // email and password in body \n    const response = axios.post(server + '/authenticate', {email, password})\n        .then(res => res.data);\n\n    return response;\n}\n\nexport { register, authenticate }","import React, { useContext, useState } from 'react';\nimport { Button, Divider, Form, Grid, Segment, Message } from 'semantic-ui-react';\nimport { AuthenticationContext } from './providers/AuthenticationProvider';\nimport RegisterModal from './RegisterModal';\nimport { register, authenticate } from './providers/ApiActions';\n\nfunction LoginForm() {\n    const authenticationContext = useContext(AuthenticationContext);\n\n    const [active, modalActive] = useState(false);\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [resultMsg, setResultMsg] = useState(''); // info message for api calls\n    const [apiSuccess, setApiSuccess] = useState(false); // is api call success or failure\n\n    const emailOnChangeHandler = ({ target: { value } }) => {\n        setEmail(value);\n    }\n\n    const passwordOnChangeHandler = ({ target: { value } }) => {\n        setPassword(value);\n    }\n\n    // register the user and update the user object if successful\n    // otherwise display an error in the modal\n    const callRegisterEndpoint = async () => {\n        let user;\n        let msg;\n\n        if (email === '' || password === '') {\n            return;\n        }\n\n        try {\n            user = await register(email, password);\n        } catch (error) {\n            setApiSuccess(false)\n            // response from server\n            if (error.response) {\n                msg = error.response.data.message;\n                // server not reached\n            } else {\n                msg = 'Unable to reach server';\n            }\n            setResultMsg(msg);\n        }\n\n        if (user) {\n            setApiSuccess(true);\n            setResultMsg('Registration successful');\n\n            // switch modal off and clear error if successful\n            changeModalState();\n        }\n    }\n\n    const callAuthenticateEndpoint = async () => {\n        let msg;\n        let user;\n\n        if (email === '' || password === '') {\n            return;\n        }\n\n        try {\n            user = await authenticate(email, password);\n        } catch (error) {\n            setApiSuccess(false)\n            // response from server\n            if (error.response) {\n                msg = error.response.data.message;\n                // server not reached\n            } else {\n                msg = 'Unable to reach server'\n            }\n            setResultMsg(msg)\n        }\n\n        if (user) {\n            // clear error message\n            authenticationContext.updateUserAndLocalStorage(user);\n            authenticationContext.setAuthenticated(true);\n            setResultMsg('')\n        }\n    }\n\n    const displayError = () => {\n        if (resultMsg.length >= 1) {\n\n            if (apiSuccess) {\n                return (\n                    <Message positive>\n                        <Message.Header>{resultMsg}</Message.Header>\n                    </Message>\n                );\n            } else {\n                return (\n                    <Message negative>\n                        <Message.Header>{resultMsg}</Message.Header>\n                    </Message>\n                );\n            }\n        }\n    }\n\n\n    const changeModalState = () => {\n        modalActive(!active)\n    }\n\n    return (\n        <div className='loginDiv'>\n            <Segment placeholder className='loginSegment'>\n                <Grid columns={2} relaxed='very' stackable>\n                    <Grid.Column className='loginGridColumn'>\n                        <Form>\n                            <Form.Input\n                                icon='user'\n                                iconPosition='left'\n                                label='Username'\n                                placeholder='Username'\n                                value={email}\n                                onChange={emailOnChangeHandler} />\n                            <Form.Input\n                                icon='lock'\n                                iconPosition='left'\n                                label='Password'\n                                type='password'\n                                placeholder='Password'\n                                value={password}\n                                onChange={passwordOnChangeHandler} />\n                            <Button content='Login' primary\n                                onClick={callAuthenticateEndpoint} />\n                        </Form>\n                    </Grid.Column>\n                    <Grid.Column verticalAlign='middle' className='loginGridColumn'>\n                        <RegisterModal\n                            data-testid='registerModal'\n                            trigger={<Button content='Sign up'\n                                icon='signup' size='big'\n                                onClick={changeModalState} />}\n                            active={active}\n                            callRegisterEndpoint={callRegisterEndpoint}\n                            password={password}\n                            passwordOnChangeHandler={passwordOnChangeHandler}\n                            email={email}\n                            emailOnChangeHandler={emailOnChangeHandler}\n                            resultMsg={resultMsg}\n                            changeModalState={changeModalState}\n                        />\n                    </Grid.Column>\n                </Grid>\n                <Divider vertical>Or</Divider>\n                {displayError()}\n            </Segment>\n        </div>\n    );\n}\n\nexport default LoginForm;\n","import { gql } from 'apollo-boost';\n\n/**\n * GraphQL queries for execution via the\n * Apollo API\n */\nconst Queries = {\n    ALL_CLIENTS: gql`\n    query getAllClients($ownerId: ID!) {\n        getAllClients(ownerId: $ownerId) {\n           id\n           clientName\n           businessType\n           location\n        }\n    }\n    `,\n    ALL_TASKS: gql`\n    query getAllTasks($ownerId: ID!) {\n        getAllTasks(ownerId: $ownerId) {\n            id\n            taskName\n            totalTime\n            completed\n            subtasks {\n              id\n              subtaskName\n              category\n              totalTime\n              dependsOn {\n                 id   \n               }\n            }\n            client {\n               id\n            }\n        }\n    }\n    `,\n    GET_TASK: gql`\n    query getTask($ownerId: ID!, $taskId: ID!) {\n        getTask(ownerId: $ownerId, taskId: $taskId) {\n           id\n           taskName\n           totalTime\n        }\n    }\n    `,\n    ALL_SUBTASKS: gql`\n    query getAllSubtasks($ownerId: ID!, $taskId: ID!) {\n        getAllSubtasks(ownerId: $ownerId, taskId: $taskId) {\n           id\n           timeCommits {\n               id\n               date\n               time\n           }\n        }\n    }\n    `,\n    ALL_TIMECOMMITS: gql`\n    query getAllTimeCommits($ownerId: ID!, $subtaskId: ID!) {\n        getAllTimeCommits(ownerId: $ownerId, subtaskId: $subtaskId) {\n           id\n           date\n           time\n        }\n    }\n    `\n}\n\nexport default Queries;","import gql from 'graphql-tag';\n\n/**\n * GraphQL mutations for execution via the\n * Apollo API\n */\nconst Mutations = {\n    CREATE_CLIENT: gql`\n    mutation createClient($ownerId: ID!, $clientName: String!, $businessType: String!, $location: String!){\n        createClient(ownerId: $ownerId, clientName: $clientName, businessType: $businessType, location: $location) {\n          id\n          clientName\n          businessType\n          location\n        }\n      }\n    `,\n    DELETE_CLIENT: gql`\n    mutation deleteClient($ownerId: ID!, $clientId: ID!){\n      deleteClient(ownerId: $ownerId, clientId: $clientId) \n    }\n    `,\n    CREATE_TASK: gql`\n    mutation createTask($ownerId: ID!, $taskName: String!, $clientId: ID!) {\n      createTask(ownerId: $ownerId, taskName: $taskName, clientId: $clientId) {\n        id\n        taskName\n        client {\n          id\n          clientName\n        }\n      }\n    }\n    `,\n    DELETE_TASK: gql`\n    mutation deleteTask($ownerId: ID!, $taskId: ID!){\n      deleteTask(ownerId: $ownerId, taskId: $taskId) \n    }\n    `,\n    CREATE_SUBTASK: gql`\n    mutation createSubtask($ownerId: ID!, $taskId: ID!, $subtaskName: String!, $category: String!, $dependsOnIds: [ID]!) {\n      createSubtask(ownerId: $ownerId, taskId: $taskId, subtaskName: $subtaskName, category: $category, dependsOnIds: $dependsOnIds) {\n             id\n             dependsOn {\n                 id\n             }\n        }\n    }\n    `,\n    DELETE_SUBTASK: gql`\n    mutation deleteSubtask($ownerId: ID!, $subtaskId: ID!){\n      deleteSubtask(ownerId: $ownerId, subtaskId: $subtaskId) \n    }\n    `,\n    CREATE_OR_UPDATE_TIMECOMMIT: gql`\n    mutation createOrUpdateTimeCommit($ownerId: ID!, $subtaskId: ID!, $time: Long!){\n      createOrUpdateTimeCommit(ownerId: $ownerId, subtaskId: $subtaskId, time: $time) {\n        id\n        ownerId\n        time\n      }\n    }\n    `,\n    UPDATE_TIMECOMMIT: gql`\n    mutation updateTimeCommit($ownerId: ID!, $timeCommitId: ID!, $time: Long!){\n      updateTimeCommit(ownerId: $ownerId, timeCommitId: $timeCommitId, time: $time) {\n        id\n      }\n    }\n    `\n};\n\nexport default Mutations;","\nconst sleep = (time) => {\n    return new Promise((resolve) => setTimeout(resolve, time));\n}\n\nexport default sleep;","import React, { useState, createContext } from 'react';\nimport { useLazyQuery, useMutation } from '@apollo/react-hooks';\n\nimport Queries from '../../graphql/Queries';\nimport Mutations from '../../graphql/Mutations';\nimport sleep from '../utils/sleep';\n\nconst GraphQLContext = createContext();\n\nfunction GraphQLProvider({ children }) {\n    const [errorMessage, setErrorMessage] = useState('');\n\n    // Used by both the top and bottom components to fetch a single\n    // task with the latest total time\n    const [getTask] = useLazyQuery(Queries.GET_TASK, {\n        fetchPolicy: 'cache-and-network'\n    });\n\n    const [deleteClient] = useMutation(Mutations.DELETE_CLIENT,\n        {\n            onError: (e) => {\n                parseError(e);\n            }\n        });\n\n    const [deleteTask] = useMutation(Mutations.DELETE_TASK,\n        {\n            onError: (e) => {\n                parseError(e);\n            }\n        });\n        \n    // Define mutation, which will refetch results on completion\n    const [deleteSubtask] = useMutation(Mutations.DELETE_SUBTASK,\n        {\n            onError: (e) => {\n                parseError(e);\n            }\n        });\n\n    // Strips 'GraphQL error:' from message\n    const parseError = ({ message }) => {\n        const firstColon = message.indexOf(':');\n        const outputMessage = message.slice(firstColon + 1);\n\n        setErrorMessage(outputMessage);\n        sleep(1000).then(() => {\n            setErrorMessage('');\n        })\n    }\n\n    return (\n        <GraphQLContext.Provider value={{\n            errorMessage, parseError, getTask,\n            deleteClient, deleteTask, deleteSubtask\n        }}>\n            {children}\n        </ GraphQLContext.Provider>\n    );\n}\n\nexport { GraphQLContext, GraphQLProvider };\n\n","// Number to divide totalTime by\nconst divisor = 10000;\nconst rbgValueTask = 'rgb(51, 204, 51)';\nconst rbgValueLightGreen = 'rgb(153, 255, 153)';\nconst rbgValueRed = 'rgb(255, 77, 77)';\n\n/**\n * Input a task to create a corresponding graph node object\n * \n * @param {Object} task \n */\nconst getTaskNode = (task) => {\n    if (!task) {\n        return;\n    }\n\n    const { totalTime } = task;\n\n    const minRadius = 14;\n    const maxRadius = 25;\n    \n    const radius = getRadius(totalTime, divisor, minRadius, maxRadius);\n\n    return {\n        'id': 1,\n        'radius': radius,\n        'depth': 1,\n        'color': rbgValueTask\n    }\n}\n\n/**\n * Input a task to create a corresponding graph node object \n * \n * @param {Object} subtask \n * @param {Number} activeSubtaskId the id of the active subtask \n * to highlight\n */\nconst getSubtaskTaskNode = (subtask, activeSubtaskId) => {\n    if (!subtask) {\n        return;\n    }\n\n    const { id, subtaskName, totalTime, dependsOn } = subtask;\n\n    // The node representing the original task has taken id 1, \n    // so add one to each subsequent subtask id\n    const idPlusOne = Number(id) + 1;\n\n    const colour = activeSubtaskId === id ? rbgValueRed : rbgValueLightGreen\n\n    const minRadius = 8;\n    const maxRadius = 20;\n\n    const radius = getRadius(totalTime, divisor, minRadius, maxRadius);\n\n    return {\n        'id': idPlusOne,\n        'name': subtaskName,\n        'radius': radius,\n        'depth': 1,\n        'dependsOn': dependsOn,\n        'color': colour\n    }\n}\n\n/**\n * \n * Map each node to an array of links to \n * other nodes\n * \n * @param {Object} node \n */\nconst getLinks = (node) => {\n    // Return links from this node to its dependencies\n    if (node.dependsOn.length) {\n        return node.dependsOn\n            .map(dependency => getLink(node.id, Number(dependency.id) + 1));\n    }\n\n    // If no dependencies, return node linked to the origin task\n    return [getLink(node.id, 1)]\n}\n\nconst getLink = (from, to) => {\n    return {\n        'source': from,\n        'target': to,\n        'distance': 120\n    }\n}\n\n/**\n * @param {Number} totalTime \n * @param {Number} divisor \n * @param {Number} minRadius \n * @param {Number} maxRadius \n */\nconst getRadius = (totalTime, divisor, minRadius, maxRadius) => {\n    const reducedTime = totalTime / divisor;\n\n    return Math.min(Math.max(reducedTime, minRadius), maxRadius);\n}\n\nexport { getTaskNode, getSubtaskTaskNode, getLinks };","import React, { useEffect, useState, createContext } from 'react';\nimport { getTaskNode, getSubtaskTaskNode, getLinks } from './NodeFactory';\n\nconst TaskContext = createContext();\n\n/**\n * Makes array of tasks globally available and initiates \n * task to graph node transformation process\n */\nfunction TaskProvider({ children }) {\n    const [tasks, setTasks] = useState(null);\n    const [activeTaskId, setActiveTaskId] = useState(null);\n    const [activeTask, setActiveTask] = useState(null);\n    const [activeSubtaskId, setActiveSubtaskId] = useState(null);\n\n    const [nodes, setNodes] = useState([]);\n    const [links, setLinks] = useState([]);\n\n    useEffect(() => {\n        if (activeTaskId === null) {\n            setNodes([]);\n            setLinks([]);\n            return;\n        }\n\n        const activeTask = tasks.filter(task => task.id === activeTaskId)[0];\n\n        // Transform the active task and its subtasks to graph nodes\n        // and the links between them \n        const taskNode = getTaskNode(activeTask);\n        const subtaskNodes = activeTask.subtasks\n            .map(subtask => getSubtaskTaskNode(subtask, activeSubtaskId));\n\n        const links = subtaskNodes\n            .map(subtaskNode => getLinks(subtaskNode))\n            .flatMap(link => link);\n\n        setNodes([taskNode, ...subtaskNodes]);\n        setLinks(links)\n    }, [tasks, activeTaskId, activeSubtaskId]);\n\n    return (\n        <TaskContext.Provider value={{\n            tasks, setTasks,\n            activeTaskId, setActiveTaskId,\n            activeTask, setActiveTask,\n            activeSubtaskId, setActiveSubtaskId,\n            nodes, links\n        }}>\n            {children}\n        </ TaskContext.Provider>\n    );\n}\n\nexport { TaskContext, TaskProvider };\n\n","const mapForDropdown = (data, itemName) => {\n    return data.sort((a, b) => a[itemName].localeCompare(b[itemName]))\n        .map((el, index) => ({\n            key: index,\n            text: el[itemName],\n            value: el.id\n        }))\n}\n\nconst getMappedClients = (clients) => {\n    return mapForDropdown(clients, 'clientName');\n}\n\nconst getMappedTasks = (tasks, activeClientId) => {\n    return mapForDropdown(tasks\n        .filter(task => task.client.id === activeClientId), 'taskName');\n}\n\nconst getMappedSubtasks = (tasks, activeClientId, activeTaskId) => {\n    const activeSubtasks = tasks\n        .filter(task => task.client.id === activeClientId && task.id === activeTaskId)\n        .flatMap(task => task.subtasks);\n\n    return mapForDropdown(activeSubtasks, 'subtaskName');\n}\n\nexport { getMappedClients, getMappedTasks, getMappedSubtasks }","/**\n *  Helper functions to place graphql delete function \n *  into curried form\n */\n\n\n /**\n  * The generic function which partially applies first \n  * the arguments required for deletion, then the id of \n  * the deleted item together with an optional callback function\n  * \n  * @param {Function} f the function to curry\n  */\nconst curryDeleteItem = (f) => {\n  return (setActive, deleteItem, ownerId) => {\n    return (id, callback) => {\n      return f(setActive, deleteItem, ownerId, id, callback);\n    }\n  }\n}\n\nconst callDeleteClient = (setActive, deleteItem, ownerId, id) => {\n  if (id) {\n    deleteItem({\n      variables: {\n        'ownerId': ownerId,\n        'clientId': id\n      }\n    });\n    // Set active clientId to null\n    setActive(null);\n  } \n}\n\nconst callDeleteTask = (setActive, deleteItem, ownerId, id) => {\n  if (id) {\n    deleteItem({\n      variables:\n      {\n        'ownerId': ownerId,\n        'taskId': id\n      }\n    });\n    // Set active taskId to null\n    setActive(null);\n  }\n}\n\nconst callDeleteSubtask = (setActive, deleteItem, ownerId, id, handleTaskRefetch) => {\n  if (id) {\n    deleteItem({\n      variables:\n      {\n        'ownerId': ownerId,\n        'subtaskId': id\n      }\n    // Refetch the task when subtask is deleted to get recalculated \n    // total time\n    }).then( () =>  {\n      handleTaskRefetch();\n    });\n    // Set active subtaskId to null\n    setActive(null);\n  }\n}\n\nexport { curryDeleteItem, callDeleteClient, callDeleteTask, callDeleteSubtask };","import React, { useState, useContext } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Button, Form } from 'semantic-ui-react'\nimport { AuthenticationContext } from '../../providers/AuthenticationProvider';\n\nimport Mutations from '../../../graphql/Mutations'\n\nfunction AddClientModal({ onClose }) {\n    const authenticationContext = useContext(AuthenticationContext);\n\n    const [clientName, setClientName] = useState('');\n    const [businessType, setBusinessType] = useState('');\n    const [location, setLocation] = useState('');\n\n    const [createClient] = useMutation(Mutations.CREATE_CLIENT);\n\n    const clientNameOnChangeHandler = ({ target: { value } }) => {\n        setClientName(value)\n    }\n\n    const businessTypeOnChangeHandler = ({ target: { value } }) => {\n        setBusinessType(value)\n    }\n\n    const locationOnChangeHandler = ({ target: { value } }) => {\n        setLocation(value)\n    }\n\n    const callCreateClient = () => {\n        // if all fields are completed\n        if (clientName && businessType && location) {\n            createClient({\n                variables:\n                {\n                    'ownerId': authenticationContext.user.id,\n                    'clientName': clientName,\n                    'businessType': businessType,\n                    'location': location\n                }\n            });\n\n            onClose();\n        }\n    }\n\n    return (\n        <Form>\n            <Form.Input required={true}\n                label={'Client name'}\n                placeholder={'Client name'}\n                onChange={clientNameOnChangeHandler}\n                value={clientName} />\n            <Form.Input required={true}\n                label={'Business Type'}\n                placeholder={'Business type'}\n                onChange={businessTypeOnChangeHandler}\n                value={businessType} />\n            <Form.Input required={true}\n                label={'Location'}\n                placeholder={'Location'}\n                onChange={locationOnChangeHandler}\n                value={location} />\n            <Button type='submit' onClick={callCreateClient}>\n                Save\n            </Button>\n            <Button type='close' onClick={onClose}>\n                Close\n            </Button>\n        </Form>\n    )\n}\n\nexport default AddClientModal;","import React, { useState, useContext } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Button, Form } from 'semantic-ui-react'\nimport { AuthenticationContext } from '../../providers/AuthenticationProvider';\n\nimport Mutations from '../../../graphql/Mutations'\n\nfunction AddTaskModal({ onClose, activeClientId }) {\n    const authenticationContext = useContext(AuthenticationContext);\n\n    const [taskName, setTaskName] = useState('');\n    const [createTask] = useMutation(Mutations.CREATE_TASK);\n\n    const taskNameOnChangeHandler = ({ target: { value } }) => {\n        setTaskName(value);\n    }\n\n    const callCreateTask = () => {\n        // if all fields are completed\n        if (taskName) {\n            createTask({\n                variables:\n                {\n                    'ownerId': authenticationContext.user.id,\n                    'taskName': taskName,\n                    'clientId': activeClientId\n                }\n            });\n\n            onClose();\n        }\n    }\n\n    return (\n        <Form>\n            <Form.Input required={true}\n                label={'Task name'}\n                placeholder={'Task name'}\n                onChange={taskNameOnChangeHandler}\n                value={taskName} />\n            <Button type='submit' onClick={callCreateTask}>\n                Save\n            </Button>\n            <Button type='close' onClick={onClose}>\n                Close\n            </Button>\n        </Form>\n    )\n}\n\nexport default AddTaskModal;","import React, { useState, useContext } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Button, Form } from 'semantic-ui-react'\nimport { AuthenticationContext } from '../../providers/AuthenticationProvider';\n\nimport Mutations from '../../../graphql/Mutations'\n\nfunction AddSubtaskModal({ onClose, activeTaskId, refetch, subtasks }) {\n    const authenticationContext = useContext(AuthenticationContext);\n\n    const [subtaskName, setSubtaskName] = useState('');\n    const [category, setCategory] = useState('');\n    const [dependsOnIds, setDependsOnIds] = useState([]);\n\n    // Define mutation, which will refetch results on completion\n    const [createSubtask] = useMutation(Mutations.CREATE_SUBTASK,\n        {\n            onCompleted: () => {\n                refetch()\n            }\n        });\n\n    const subtaskNameOnChangeHandler = ({ target: { value } }) => {\n        setSubtaskName(value);\n    }\n\n    const categoryOnChangeHandler = ({ target: { value } }) => {\n        setCategory(value);\n    }\n    const dropdownOnChangeHandler = (e, { value }) => {\n        setDependsOnIds(value);\n    }\n\n    const callCreateSubtask = () => {\n        // if all fields are completed\n        if (subtaskName && category) {\n            createSubtask({\n                variables:\n                {\n                    'ownerId': authenticationContext.user.id,\n                    'taskId': activeTaskId,\n                    'subtaskName': subtaskName,\n                    'category': category,\n                    'dependsOnIds': dependsOnIds\n                }\n            });\n            onClose();\n        }\n    }\n\n    return (\n        <Form>\n            <Form.Input required={true}\n                label={'Subtask name'}\n                placeholder={'Subtask name'}\n                onChange={subtaskNameOnChangeHandler}\n                value={subtaskName} />\n            <Form.Input required={true}\n                label={'Category'}\n                placeholder={'Category'}\n                onChange={categoryOnChangeHandler}\n                value={category} />\n            <Form.Dropdown fluid multiple selection required={true}\n                label={'Depends on'}\n                placeholder={'Select tasks'}\n                options={subtasks}\n                onClick={() => refetch()}\n                onChange={dropdownOnChangeHandler} />\n            <Button type='submit' onClick={callCreateSubtask}>\n                Save\n            </Button>\n            <Button type='close' onClick={onClose}>\n                Close\n            </Button>\n        </Form>\n    )\n}\n\nexport default AddSubtaskModal;","import React, { useState } from 'react';\nimport { Segment, Dropdown, Button, Modal } from 'semantic-ui-react';\n\nimport AddClientModal from './modals/AddClientModal';\nimport AddTaskModal from './modals/AddTaskModal';\nimport AddSubtaskModal from './modals/AddSubtaskModal';\n\nfunction DropdownSegment({ items, refetch, deleteItem, itemName, setActiveItem, activeClientId, activeTaskId,\n    addDisabled, deleteDisabled, handleTaskRefetch }) {\n\n    const [modalOpen, setModalOpen] = useState(false);\n    const [dropdownValue, setDropdownValue] = useState(null);\n\n    const handleOpen = () => setModalOpen(true);\n    const handleClose = () => setModalOpen(false);\n\n    // update the dropdown value, the id associated with the \n    // selected item\n    const handleDropdownChange = (e, { value }) => {\n        setDropdownValue(value);\n        setActiveItem(value);\n    }\n\n    const callDeleteItem = () => {\n        if (dropdownValue) {\n            deleteItem(dropdownValue, handleTaskRefetch);\n            setDropdownValue(null);\n            setActiveItem(null);\n        }\n    }\n\n    let modal;\n    switch (itemName) {\n        case 'client':\n            modal = <AddClientModal onClose={handleClose}> </AddClientModal>;\n            break;\n        case 'task':\n            modal = <AddTaskModal onClose={handleClose} activeClientId={activeClientId}> </AddTaskModal>;\n            break;\n        case 'subtask':\n            modal = <AddSubtaskModal onClose={handleClose} activeTaskId={activeTaskId} subtasks={items} refetch={refetch}> </AddSubtaskModal>;\n            break;\n        default: \n            modal = null;\n    }\n\n    const deleteButton = deleteDisabled ? <Button disabled basic onClick={callDeleteItem}>Delete {itemName}</Button> :\n        <Button basic size='small' onClick={callDeleteItem}>Delete {itemName}</Button>\n\n    const addButton = addDisabled ? <Button disabled basic onClick={handleOpen}>New {itemName}</Button> :\n        <Button basic size='small' onClick={handleOpen}>New {itemName}</Button>\n\n    return (\n        <Segment.Group compact horizontal>\n            <Segment id='dropdownContainerLeft' textAlign='center'>\n                <Dropdown\n                    search selection\n                    id='dropdown'\n                    placeholder={`Select ${itemName}`}\n                    options={items}\n                    onClick={() => refetch()}\n                    onChange={handleDropdownChange}\n                    value={dropdownValue} />\n            </Segment>\n            <Segment textAlign='center'>\n                {deleteButton}\n            </Segment>\n            <Segment textAlign='center'>\n                <Modal\n                    trigger={addButton}\n                    open={modalOpen} >\n                    <Modal.Header>Add {itemName}</Modal.Header>\n                    <Modal.Content>\n                        {modal}\n                    </Modal.Content>\n                </Modal>\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default DropdownSegment;\n","let time = 1;\nlet isRunning = false;\nlet interval = null;\n\n/**\n *  Start or stop the timer \n * @param {Function} setTime \n */\nconst callTimer = (setTime) => {\n    // The timer is not running \n    if (!isRunning) {\n        interval = setInterval(() => {\n            setTime(time++);\n        }, 1000);\n        isRunning = true;\n    } else {\n        clearInterval(interval);\n        isRunning = false;\n    }\n}\n\n/**\n *  Resets all state and returns the\n *  current time\n * @param {Function} setTime \n */\nconst resetTimer = (setTime) => {\n    clearInterval(interval);\n    setTime(0);\n    isRunning = false;\n    const returnTime = time;\n    time = 1;\n\n    return returnTime;\n}\n\nexport { callTimer, resetTimer };","const ONE_DAY = 60 * 60 * 24;\n/**\n *  Convert time in seconds to a format suitable for display\n * \n * @param {number} timeIn \n * @param {boolean} hideSeconds \n * @param {boolean} OneDayMax\n */\nconst convertToHoursMinutesAndSecondsDisplay = (timeIn, hideSeconds, OneDayMax) => {\n    // Time will stop updating after 23:59:59\n    if (OneDayMax && timeIn >= ONE_DAY) {\n        return '24:00:00'\n    }\n\n    const hours = timeIn / (60 * 60);\n    const remainder = timeIn % (60 * 60);\n    const minutes = remainder / 60;\n    const seconds = remainder % 60;\n    const hoursLeadingZero = hours < 10 ? '0' : '';\n    const minutesLeadingZero = minutes < 10 ? '0' : '';\n    const secondsLeadingZero = seconds < 10 ? '0' : '';\n\n    if (!hideSeconds) {\n        return `${hoursLeadingZero}${Math.floor(hours)}:${minutesLeadingZero}${Math.floor(minutes)}:${secondsLeadingZero}${seconds}`;\n    } else {\n        return `${hoursLeadingZero}${Math.floor(hours)}:${minutesLeadingZero}${Math.floor(minutes)}`;\n    }\n}\n\nexport default convertToHoursMinutesAndSecondsDisplay;","import React from 'react';\nimport { Segment, Statistic } from 'semantic-ui-react';\n\nimport convertToHoursMinutesAndSecondsDisplay from './ConvertToHoursMinutesAndSeconds';\n\nfunction TotalTimeDisplay({ activeTask, activeTaskId, tasks }) {\n    let taskForDisplay;\n\n    // The task has not been updated by the timer yet,\n    // so use the current task state\n    if (!activeTask && activeTaskId && tasks) {\n        taskForDisplay = tasks\n            .filter(task => Number(task.id) === Number(activeTaskId))[0];\n        \n    } else if (activeTask) {\n        taskForDisplay = activeTask;\n    }\n\n    const getResultDisplay = () => {\n        // If task has been retrieved\n        if (taskForDisplay) {\n            const { taskName, totalTime } = taskForDisplay;\n\n            return <Statistic label={taskName} value={convertToHoursMinutesAndSecondsDisplay(totalTime, false, false)} />\n        } else {\n            return <Statistic label='Select a task' value='00:00:00' />\n        }\n    }\n\n    return (\n        <Segment id='totalTimeDisplay'>\n            {getResultDisplay()}\n        </Segment>);\n}\n\nexport default TotalTimeDisplay;\n","import React, { useState, useContext } from 'react';\nimport { Segment, Grid, Button, Message } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\n\nimport { AuthenticationContext } from '../../providers/AuthenticationProvider';\nimport { GraphQLContext } from '../../providers/GraphQLProvider';\nimport { TaskContext } from '../../providers/TaskProvider';\n\nimport { callTimer, resetTimer } from './Timer';\nimport Mutations from '../../../graphql/Mutations';\nimport convertToHoursMinutesAndSecondsDisplay from './ConvertToHoursMinutesAndSeconds';\nimport TotalTimeDisplay from './TotalTimeDisplay';\n\nfunction TimerBox() {\n    const { user: { id: userId } } = useContext(AuthenticationContext);\n    const { activeSubtaskId, activeTaskId, tasks, activeTask, setActiveTask } = useContext(TaskContext);\n    const { getTask } = useContext(GraphQLContext);\n\n    const [time, setTime] = useState(0);\n    const [showMessage, setShowMessage] = useState(false);\n    const [message, setMessage] = useState(false);\n\n    const [createOrUpdateTimeCommit] = useMutation(Mutations.CREATE_OR_UPDATE_TIMECOMMIT, {\n        onCompleted: () => getTask({\n            variables:\n            {\n                'ownerId': userId,\n                'taskId': activeTaskId\n            },\n            onCompleted: data => {\n                setActiveTask(data.getTask)\n            }\n        })\n    });\n\n    const callCreateOrUpdateTimeCommit = () => {\n        // If all fields are assigned\n        if (time > 0 && activeSubtaskId) {\n            createOrUpdateTimeCommit({\n                variables:\n                {\n                    'ownerId': userId,\n                    'subtaskId': activeSubtaskId,\n                    'time': time\n                }\n            });\n            handleResetTimerClick();\n        } else {\n            const message = time === 0 ? 'Please start the timer before saving' : 'Please select a subtask'\n            setMessage(message);\n            handleShowMessageStateChange();\n        }\n    }\n\n    const handleTimerClick = () => {\n        if (activeSubtaskId) {\n            callTimer(setTime);\n        } else {\n            setMessage('Please select a subtask');\n            handleShowMessageStateChange();\n        }\n    }\n\n    const handleResetTimerClick = () => {\n        resetTimer(setTime);\n    }\n\n    const handleShowMessageStateChange = () => {\n        setShowMessage(true);\n        setTimeout(() => {\n            setShowMessage(false);\n        }, 1000);\n    }\n\n    const resultMessage = () => {\n        if (showMessage) {\n            return (\n                <Message negative id='selectSubtaskPrompt'>\n                    <Message.Header>{message}</Message.Header>\n                </Message>\n            );\n        }\n    }\n\n    return (\n        <Segment.Group id='timerBox'>\n            <TotalTimeDisplay activeTask={activeTask} activeTaskId={activeTaskId} tasks={tasks} />\n            <Segment >\n                <Grid columns={2} stackable textAlign='center'>\n                    <Grid.Column id='timerCol'>\n                        <div className='counterWrapper'>\n                            <button className='timerButton' onClick={handleTimerClick}>{convertToHoursMinutesAndSecondsDisplay(time, false, true)}\n                            </button>\n                        </div>\n                    </Grid.Column>\n                    <Grid.Column id='timerCol'>\n                        <Button.Group id='timerButtons'>\n                            <Button size='huge' basic color='green' onClick={callCreateOrUpdateTimeCommit}>Save</Button>\n                            <Button size='huge' basic color='green' onClick={handleResetTimerClick}>Reset</Button>\n                        </ Button.Group>\n                    </Grid.Column>\n                </Grid>\n                {resultMessage()}\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default TimerBox;\n","import React, { useContext, useState } from 'react';\nimport { Segment } from 'semantic-ui-react';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport { GraphQLContext } from '../providers/GraphQLProvider';\nimport { TaskContext } from '../providers/TaskProvider';\nimport Queries from '../../graphql/Queries';\n\nimport { getMappedClients, getMappedTasks, getMappedSubtasks } from './helpers/DataProcessors'\nimport { curryDeleteItem, callDeleteClient, callDeleteTask, callDeleteSubtask } from './helpers/DeleteFunctions';\nimport DropdownSegment from './DropdownSegment';\nimport TimerBox from './timercomponents/TimerBox';\n\n/** \n * Top level component for fetching and processing data to supply\n * to its children\n**/\nfunction TopSegment({ userId }) {\n  const { getTask, deleteClient, deleteTask, deleteSubtask } = useContext(GraphQLContext);\n  const { setTasks, activeTaskId, setActiveTaskId, activeTask,\n    setActiveTask, activeSubtaskId, setActiveSubtaskId } = useContext(TaskContext);\n\n  const [activeClientId, setActiveClientId] = useState(null);\n\n  // Returns curried function awaiting deleted item id\n  const curriedDeleteClient = curryDeleteItem(callDeleteClient);\n  const curriedDeleteTask = curryDeleteItem(callDeleteTask);\n  const curriedDeleteSubtask = curryDeleteItem(callDeleteSubtask);\n\n  // Retrieve data for all clients and tasks\n  const { loading: clientsLoading, error: clientsError, data: clientsData, refetch: clientsRefetch } = useQuery(Queries.ALL_CLIENTS, {\n    variables: { ownerId: userId },\n  });\n  const { loading: tasksLoading, error: tasksError, data: tasksData, refetch: tasksRefetch } = useQuery(Queries.ALL_TASKS, {\n    variables: { ownerId: userId },\n  });\n\n  if (clientsLoading || tasksLoading) return null;\n  if (clientsError || tasksError) clientsError ? console.error(clientsError) : console.error(tasksError);\n\n  const clients = getMappedClients(clientsData.getAllClients);\n\n  setTasks(tasksData.getAllTasks);\n  const tasks = getMappedTasks(tasksData.getAllTasks, activeClientId);\n\n  // subtasks associated with the currently selected task\n  const subtasks = getMappedSubtasks(tasksData.getAllTasks, activeClientId, activeTaskId)\n\n  const handleSetClientId = (id) => {\n    setActiveClientId(id);\n    setActiveTaskId(null);\n    setTasks(null);\n    setActiveSubtaskId(null);;\n  }\n\n  const handleSetTaskId = (id) => {\n    setActiveTaskId(id);\n    setActiveSubtaskId(null);;\n  }\n\n  const handleTaskRefetch = () => {\n    tasksRefetch()\n    setActiveTaskId(activeTaskId);\n    setTasks(tasksData.getAllTasks);\n    if (activeTaskId) {\n      getTask({\n        variables:\n        {\n          'ownerId': userId,\n          'taskId': activeTaskId\n        },\n        onCompleted: data => {\n          setActiveTask(data.getTask)\n        }\n      })\n    } \n  }\n\n  return (\n    <Segment.Group size={'small'} compact horizontal id='topSegment'>\n      <Segment size={'small'} id='selectionBox'>\n        <DropdownSegment\n          refetch={clientsRefetch}\n          items={clients}\n          deleteItem={curriedDeleteClient(setActiveClientId, deleteClient, userId)}\n          itemName={'client'}\n          setActiveItem={handleSetClientId}\n          deleteDisabled={!Boolean(activeClientId)}\n          addDisabled={false} />\n        <DropdownSegment\n          refetch={handleTaskRefetch}\n          items={tasks}\n          deleteItem={curriedDeleteTask(setActiveTaskId, deleteTask, userId)}\n          itemName={'task'}\n          setActiveItem={handleSetTaskId}\n          activeClientId={activeClientId}\n          addDisabled={!Boolean(activeClientId)}\n          deleteDisabled={!Boolean(activeTaskId)} />\n        <DropdownSegment\n          refetch={handleTaskRefetch}\n          items={subtasks}\n          deleteItem={curriedDeleteSubtask(setActiveSubtaskId, deleteSubtask, userId)}\n          handleTaskRefetch={handleTaskRefetch}\n          itemName={'subtask'}\n          setActiveItem={setActiveSubtaskId}\n          activeTaskId={activeTaskId}\n          addDisabled={!Boolean(activeTaskId)}\n          deleteDisabled={!Boolean(activeSubtaskId)} />\n      </Segment>\n      <Segment>\n        <TimerBox\n          getTask={getTask}\n          activeTask={activeTask}\n        />\n      </Segment>\n    </Segment.Group>\n  );\n}\n\nexport default TopSegment;\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useState, useEffect, useMemo } from 'react'\nimport get from 'lodash/get'\nimport isString from 'lodash/isString'\nimport isNumber from 'lodash/isNumber'\nimport { forceSimulation, forceManyBody, forceCenter, forceLink } from 'd3-force'\n\nconst computeForces = ({ linkDistance, repulsivity, distanceMin, distanceMax, center }) => {\n    let computedLinkDistance\n    if (typeof linkDistance === 'function') {\n        computedLinkDistance = linkDistance\n    } else if (isNumber(linkDistance)) {\n        computedLinkDistance = linkDistance\n    } else if (isString(linkDistance)) {\n        computedLinkDistance = link => get(link, linkDistance)\n    }\n\n    const linkForce = forceLink()\n        .id(d => d.id)\n        .distance(computedLinkDistance)\n\n    const chargeForce = forceManyBody()\n        .strength(-repulsivity)\n        .distanceMin(distanceMin)\n        .distanceMax(distanceMax)\n\n    const centerForce = forceCenter(center[0], center[1])\n\n    return { link: linkForce, charge: chargeForce, center: centerForce }\n}\n\nexport const useNetwork = ({\n    nodes,\n    links,\n    linkDistance,\n    repulsivity,\n    distanceMin,\n    distanceMax,\n    center,\n    iterations,\n}) => {\n    const [currentNodes, setCurrentNodes] = useState([])\n    const [currentLinks, setCurrentLinks] = useState([])\n\n    useEffect(() => {\n        const forces = computeForces({\n            linkDistance,\n            repulsivity,\n            distanceMin,\n            distanceMax,\n            center,\n        })\n\n        const nodesCopy = nodes.map(node => ({ ...node }))\n        const linksCopy = links.map(link => ({\n            id: `${link.source}.${link.target}`,\n            ...link,\n        }))\n\n        const simulation = forceSimulation(nodesCopy)\n            .force('link', forces.link.links(linksCopy))\n            .force('charge', forces.charge)\n            .force('center', forces.center)\n            .stop()\n\n        simulation.tick(iterations)\n\n        setCurrentNodes(nodesCopy)\n        setCurrentLinks(\n            linksCopy.map(link => {\n                link.previousSource = currentNodes.find(n => n.id === link.source.id)\n                link.previousTarget = currentNodes.find(n => n.id === link.target.id)\n\n                return link\n            })\n        )\n\n        return () => {\n            simulation.stop()\n        }\n    }, [\n        nodes,\n        links,\n        linkDistance,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        center[0],\n        center[1],\n    ])\n\n    return [currentNodes, currentLinks]\n}\n\nexport const useNodeColor = color =>\n    useMemo(() => {\n        if (typeof color === 'function') return color\n        return () => color\n    }, [color])\n\nexport const useLinkThickness = thickness =>\n    useMemo(() => {\n        if (typeof thickness === 'function') return thickness\n        return () => thickness\n    }, [thickness])\n","import React from 'react';\n\nfunction Slider({ handleSliderChange, min, max, value }) {\n\n    return (\n        <div className='sliderContainer'>\n            <input\n                onInput={handleSliderChange}\n                type='range' min={min}\n                max={max}\n                value={value}\n                className='slider'\n                id='myRange'\n            />\n        </div>\n    );\n}\n\nexport default Slider","import React, { useContext } from 'react';\nimport { Segment, Button } from 'semantic-ui-react'\nimport { useMutation } from '@apollo/react-hooks';\n\nimport { AuthenticationContext } from '../../providers/AuthenticationProvider';\nimport { GraphQLContext } from '../../providers/GraphQLProvider';\nimport { TaskContext } from '../../providers/TaskProvider';\n\nimport Mutations from '../../../graphql/Mutations'\n\nfunction SliderDisplay({ date, time, timeCommitId, displayTime, setMessage, getTimecommits }) {\n    const { user: { id: userId } } = useContext(AuthenticationContext);\n    const { activeTaskId, setActiveTask } = useContext(TaskContext);\n    const { getTask } = useContext(GraphQLContext);\n\n    const [updateTime] = useMutation(Mutations.UPDATE_TIMECOMMIT,\n        {\n            onCompleted: () => {\n                setMessage(true, 'Update successful');\n                getTask({\n                    variables:\n                    {\n                      'ownerId': userId,\n                      'taskId': activeTaskId\n                    },\n                    onCompleted: data => {\n                      setActiveTask(data.getTask)\n                    }\n                  })\n                getTimecommits()\n            },\n            onError: (e) => {\n                setMessage(false, 'Update failed');\n            }\n        });\n\n    const callUpdateTime = () => {\n        // if all fields are completed\n        if (updateTime) {\n            updateTime({\n                variables:\n                {\n                    'ownerId': userId,\n                    'timeCommitId': timeCommitId,\n                    'time': Number(time)\n                }\n            });\n        }\n    }\n\n    return (\n        <Segment.Group horizontal>\n            <Segment textAlign='center' size='large'>{new Date(date).toDateString()}</Segment>\n            <Segment textAlign='center' size='large'>{displayTime}</Segment>\n            <Segment textAlign='center'>\n                <Button size='medium' onClick={callUpdateTime}>Update</Button>\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default SliderDisplay;","import React, { useState } from 'react';\nimport { Segment } from 'semantic-ui-react';\n\nimport Slider from './Slider';\nimport SliderDisplay from './SliderDisplay';\n\nimport convertToHoursMinutesAndSecondsDisplay from '../../topsegment/timercomponents/ConvertToHoursMinutesAndSeconds';\n\n/**\n * Contains the slider for adjusting time associated with\n * time commit and its relevant details.\n */\nfunction SliderContainer({ timeCommit, setMessage, getTimecommits }) {\n    const min = 0;\n    const max = 288;\n\n    // Represent as five minute increments\n    const asFiveMinutes = (seconds) => {\n        return Math.round(seconds / (60 * 5));\n    }\n\n    // Represent five minute increments as seconds\n    const asSeconds = (fiveMinuteIncrements) => {\n        return fiveMinuteIncrements * (60 * 5);\n    }\n\n    // Convert time from five minute segments to seconds\n    // the display as hours:minutes:seconds\n    const handleDisplayTime = (timeIn) => {\n        // Hide seconds and one day max set to true\n        return convertToHoursMinutesAndSecondsDisplay(asSeconds(timeIn), true, true);\n    }\n\n    const { id, time, date } = timeCommit;\n    const [value, setValue] = useState(asFiveMinutes(time));\n\n    const handleSliderChange = ({ target: { value } }) => {\n        setValue(value);\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Slider\n                    handleSliderChange={handleSliderChange}\n                    min={min}\n                    max={max}\n                    value={value}\n                />\n            </Segment>\n            <SliderDisplay\n                date={new Date(date).toDateString()}\n                displayTime={handleDisplayTime(value)}\n                timeCommitId={Number(id)}\n                time={asSeconds(value)}\n                setMessage={setMessage}\n                getTimecommits={getTimecommits}\n            />\n        </Segment.Group>\n    );\n}\n\nexport default SliderContainer","import React, { useState } from 'react'\nimport { Modal, Message, Button, Statistic } from 'semantic-ui-react'\n\nimport SliderContainer from './slider/SliderContainer';\nimport Sleep from './../utils/sleep';\n\n/**\n * Display a list of timecommits associated with each subtask\n * and enable update of committed time by adjusting the slider\n */\nfunction NodeModal({ handleClose, isOpen, timeCommits, name, totalTime, getTimecommits }) {\n  const [messageText, setMessageText] = useState('');\n  const [isSuccessMessage, setIsSuccessMessage] = useState(true);\n\n  /**\n   * Indicate the result of the updateTimeCommit mutation\n   * to the user\n   * \n   * @param {Boolean} successful\n   * @param {String} messageText \n   */\n  const setMessage = (successful, messageText) => {\n    if (!successful) {\n      setIsSuccessMessage(false);\n    }\n\n    setMessageText(messageText);\n\n    Sleep(1000).then(() => {\n      setIsSuccessMessage(true);\n      setMessageText('');\n    })\n\n  }\n\n  const renderMessage = () => {\n    if (messageText && isSuccessMessage) {\n      return (\n        <Message positive>\n          {messageText}\n        </Message>\n      );\n    }\n    else if (messageText && !isSuccessMessage) {\n      return (\n        <Message negative>\n          {messageText}\n        </Message>\n      );\n    }\n  }\n\n  const renderTimeCommits = () => {\n    return timeCommits\n      .map((timeCommit, i) => {\n        return (\n          <div key={i}>\n            <SliderContainer\n              timeCommit={timeCommit}\n              setMessage={setMessage}\n              getTimecommits={getTimecommits}\n            />\n          </div>)\n      });\n  }\n\n  return (\n    <Modal open={isOpen}>\n      <Modal.Header className=\"nodeModalHeader\">\n        <Statistic label={name} value={totalTime} />\n      </Modal.Header>\n      <Modal.Content scrolling>\n        {renderTimeCommits()}\n      </Modal.Content>\n      <Modal.Actions>\n        <Button onClick={handleClose} >\n          Close\n        </Button>\n      </Modal.Actions>\n      {renderMessage()}\n    </Modal>\n  );\n}\n\nexport default NodeModal","import React, { useContext, useState, memo } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { useLazyQuery } from '@apollo/react-hooks';\n\nimport Queries from '../../../graphql/Queries';\nimport { AuthenticationContext } from '../../providers/AuthenticationProvider';\nimport NodeModal from '../../bottomsegment/NodeModal';\nimport ConvertToHoursMinutesAndSeconds from '../../topsegment/timercomponents/ConvertToHoursMinutesAndSeconds';\n\nconst Node = ({ x, y, radius, color, borderWidth, borderColor, scale = 1, node }) => {\n    const { user } = useContext(AuthenticationContext);\n    const ownerId = user.id;\n    const [modelOpen, setModelOpen] = useState(false);\n    const [timeCommits, setTimecommits] = useState([]);\n    const [totalTime, setTotalTime] = useState(0);\n\n    const [getTimecommits] = useLazyQuery(Queries.ALL_TIMECOMMITS, {\n        variables: { ownerId, subtaskId: node.id - 1 },\n        fetchPolicy: 'cache-and-network',\n        onCompleted: data => {\n            setTimecommits(data.getAllTimeCommits);\n            setTotalTime(calculateTotalTime(data.getAllTimeCommits));\n            setModelOpen(true);\n        }\n    });\n\n    const handleOpenModal = () => {\n        // Don't call for task node \n        if (node.id !== 1) {\n            getTimecommits();\n        }\n    }\n\n    const handleCloseModal = () => {\n        setModelOpen(false);\n    }\n\n    const calculateTotalTime = (timeCommits) => {\n        if (!timeCommits.length || !timeCommits) return 0;\n\n        return timeCommits\n        .map(item => item.time)\n        .reduce((total, time) => total + time)\n    }\n\n    return (\n        <React.Fragment>\n            <circle\n                onClick={handleOpenModal}\n                transform={`translate(${x},${y}) scale(${scale})`}\n                r={radius}\n                fill={color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n            >\n            </circle>\n            <NodeModal\n                handleClose={handleCloseModal}\n                isOpen={modelOpen}\n                timeCommits={timeCommits}\n                totalTime={ConvertToHoursMinutesAndSeconds(totalTime, false, false)}\n                name={node.name} \n                getTimecommits={getTimecommits}/>\n        </React.Fragment>\n    )\n}\n\nNode.propTypes = {\n    node: PropTypes.object.isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    radius: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n    scale: PropTypes.number,\n}\n\nexport default memo(Node)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { TransitionMotion, spring } from 'react-motion'\nimport { useMotionConfig } from '@nivo/core'\nimport Node from './Node'\n\nconst willEnter = ({ style }) => ({\n    x: style.x.val,\n    y: style.y.val,\n    radius: style.radius.val,\n    scale: 0,\n})\n\nconst willLeave = springConfig => ({ style }) => ({\n    x: style.x,\n    y: style.y,\n    radius: style.radius,\n    scale: spring(0, springConfig),\n})\n\nconst AnimatedNodes = ({ nodes, color, borderWidth, borderColor }) => {\n    const { springConfig } = useMotionConfig()\n\n    return (\n        <TransitionMotion\n            willEnter={willEnter}\n            willLeave={willLeave(springConfig)}\n            styles={nodes.map(node => ({\n                key: node.id,\n                data: node,\n                style: {\n                    x: spring(node.x, springConfig),\n                    y: spring(node.y, springConfig),\n                    radius: spring(node.radius, springConfig),\n                    scale: spring(1, springConfig),\n                },\n            }))}>\n            {interpolatedStyles => (\n                <>\n                    {interpolatedStyles.map(({ key, style, data: node }) => {\n                        return (\n                            <Node\n                                key={key}\n                                node={node}\n                                x={style.x}\n                                y={style.y}\n                                radius={Math.max(style.radius, 0)}\n                                color={color(node)}\n                                borderWidth={borderWidth}\n                                borderColor={borderColor(node)}\n                                scale={Math.max(style.scale, 0)}\n                            />\n                        )\n                    })}\n                </>\n            )}\n        </TransitionMotion>\n    )\n}\n\nAnimatedNodes.propTypes = {\n    nodes: PropTypes.array.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n}\n\nexport default memo(AnimatedNodes)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport Node from './Node'\n\nconst StaticNodes = ({ nodes, color, borderWidth, borderColor }) => {\n    return nodes.map(node => {\n        return (\n            <Node\n                key={node.id}\n                node={node}\n                x={node.x}\n                y={node.y}\n                radius={node.radius}\n                color={color(node)}\n                borderWidth={borderWidth}\n                borderColor={borderColor(node)}\n            />\n        )\n    })\n}\n\nStaticNodes.propTypes = {\n    nodes: PropTypes.array.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n}\n\nexport default memo(StaticNodes)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Link = ({ sourceX, sourceY, targetX, targetY, thickness, color }) => {\n    return (\n        <line\n            stroke={color}\n            strokeWidth={thickness}\n            strokeLinecap='round'\n            x1={sourceX}\n            y1={sourceY}\n            x2={targetX}\n            y2={targetY}\n        />\n    )\n}\n\nLink.propTypes = {\n    link: PropTypes.object.isRequired,\n    sourceX: PropTypes.number.isRequired,\n    sourceY: PropTypes.number.isRequired,\n    targetX: PropTypes.number.isRequired,\n    targetY: PropTypes.number.isRequired,\n    thickness: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n}\n\nexport default memo(Link)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { TransitionMotion, spring } from 'react-motion'\nimport { useMotionConfig } from '@nivo/core'\nimport Link from './Link'\n\nconst willEnter = ({ style, data }) => {\n    const sourceX = data.previousSource ? data.previousSource.x : style.sourceX.val\n    const sourceY = data.previousSource ? data.previousSource.y : style.sourceY.val\n\n    return {\n        sourceX,\n        sourceY,\n        targetX: sourceX,\n        targetY: sourceY,\n    }\n}\n\nconst AnimatedLinks = ({ links, linkThickness, linkColor }) => {\n    const { springConfig } = useMotionConfig()\n\n    return (\n        <TransitionMotion\n            willEnter={willEnter}\n            styles={links.map(link => ({\n                key: link.id,\n                data: link,\n                style: {\n                    sourceX: spring(link.source.x, springConfig),\n                    sourceY: spring(link.source.y, springConfig),\n                    targetX: spring(link.target.x, springConfig),\n                    targetY: spring(link.target.y, springConfig),\n                },\n            }))}\n        >\n            {interpolatedStyles => (\n                <>\n                    {interpolatedStyles.map(({ key, style, data: link }) => {\n                        return (\n                            <Link\n                                key={key}\n                                link={link}\n                                color={linkColor(link)}\n                                thickness={linkThickness(link)}\n                                sourceX={style.sourceX}\n                                sourceY={style.sourceY}\n                                targetX={style.targetX}\n                                targetY={style.targetY}\n                            />\n                        )\n                    })}\n                </>\n            )}\n        </TransitionMotion>\n    )\n}\n\nAnimatedLinks.propTypes = {\n    links: PropTypes.array.isRequired,\n    linkThickness: PropTypes.func.isRequired,\n    linkColor: PropTypes.func.isRequired,\n}\n\nexport default memo(AnimatedLinks)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport Link from './Link'\n\nconst StaticLinks = ({ links, linkThickness, linkColor }) => {\n    return links.map(link => {\n        return (\n            <Link\n                key={link.id}\n                link={link}\n                color={linkColor(link)}\n                thickness={linkThickness(link)}\n                sourceX={link.source.x}\n                sourceY={link.source.y}\n                targetX={link.target.x}\n                targetY={link.target.y}\n            />\n        )\n    })\n}\n\nStaticLinks.propTypes = {\n    links: PropTypes.array.isRequired,\n    linkThickness: PropTypes.func.isRequired,\n    linkColor: PropTypes.func.isRequired,\n}\n\nexport default memo(StaticLinks)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { Fragment } from 'react'\nimport { withContainer, useDimensions, SvgWrapper, useTheme, useMotionConfig } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { NetworkPropTypes, NetworkDefaultProps } from './props'\nimport { useNetwork, useNodeColor, useLinkThickness } from './hooks'\nimport AnimatedNodes from './AnimatedNodes'\nimport StaticNodes from './StaticNodes'\nimport AnimatedLinks from './AnimatedLinks'\nimport StaticLinks from './StaticLinks'\n\nconst Network = props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n\n        nodes: rawNodes,\n        links: rawLinks,\n\n        linkDistance,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n\n        layers,\n\n        nodeColor,\n        nodeBorderWidth,\n        nodeBorderColor,\n\n        linkThickness,\n        linkColor,\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { animate } = useMotionConfig()\n    const theme = useTheme()\n    const getColor = useNodeColor(nodeColor)\n    const getBorderColor = useInheritedColor(nodeBorderColor, theme)\n    const getLinkThickness = useLinkThickness(linkThickness)\n    const getLinkColor = useInheritedColor(linkColor, theme)\n\n    const [nodes, links] = useNetwork({\n        nodes: rawNodes,\n        links: rawLinks,\n        linkDistance,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        center: [innerWidth / 2, innerHeight / 2],\n    })\n\n    const layerById = {\n        links: React.createElement(animate === true ? AnimatedLinks : StaticLinks, {\n            key: 'links',\n            links,\n            linkThickness: getLinkThickness,\n            linkColor: getLinkColor,\n        }),\n        nodes: React.createElement(animate === true ? AnimatedNodes : StaticNodes, {\n            key: 'nodes',\n            nodes,\n            color: getColor,\n            borderWidth: nodeBorderWidth,\n            borderColor: getBorderColor,\n        }),\n    }\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin}>\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                nodes,\n                                links,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nNetwork.propTypes = NetworkPropTypes\nNetwork.defaultProps = NetworkDefaultProps\n\nexport default withContainer(Network)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Network from './Network'\n\nconst ResponsiveNetwork = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Network width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveNetwork\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { useRef, useEffect } from 'react'\nimport { withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { NetworkCanvasPropTypes, NetworkCanvasDefaultProps } from './props'\nimport { useNetwork, useNodeColor, useLinkThickness } from './hooks'\n\nconst NetworkCanvas = props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio,\n\n        nodes: rawNodes,\n        links: rawLinks,\n\n        linkDistance,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n\n        layers,\n\n        nodeColor,\n        nodeBorderWidth,\n        nodeBorderColor,\n\n        linkThickness,\n        linkColor,\n\n        isInteractive,\n    } = props\n\n    const canvasEl = useRef(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const [nodes, links] = useNetwork({\n        nodes: rawNodes,\n        links: rawLinks,\n        linkDistance,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        center: [innerWidth / 2, innerHeight / 2],\n    })\n\n    const theme = useTheme()\n    const getNodeColor = useNodeColor(nodeColor)\n    const getBorderColor = useInheritedColor(nodeBorderColor, theme)\n    const getLinkThickness = useLinkThickness(linkThickness)\n    const getLinkColor = useInheritedColor(linkColor, theme)\n\n    useEffect(() => {\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'links') {\n                links.forEach(link => {\n                    ctx.strokeStyle = getLinkColor(link)\n                    ctx.lineWidth = getLinkThickness(link)\n                    ctx.beginPath()\n                    ctx.moveTo(link.source.x, link.source.y)\n                    ctx.lineTo(link.target.x, link.target.y)\n                    ctx.stroke()\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    ctx.fillStyle = getNodeColor(node)\n                    ctx.beginPath()\n                    ctx.arc(node.x, node.y, node.radius, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (nodeBorderWidth > 0) {\n                        ctx.strokeStyle = getBorderColor(node)\n                        ctx.lineWidth = nodeBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, {\n                    ...props,\n                    nodes,\n                    links,\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        nodes,\n        links,\n        getNodeColor,\n        nodeBorderWidth,\n        getBorderColor,\n        getLinkThickness,\n        getLinkColor,\n    ])\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n        />\n    )\n}\n\nNetworkCanvas.propTypes = NetworkCanvasPropTypes\nNetworkCanvas.defaultProps = NetworkCanvasDefaultProps\n\nexport default withContainer(NetworkCanvas)\n","import React, { useContext } from 'react';\nimport { ResponsiveNetwork } from '../nivo/network';\nimport { Message } from 'semantic-ui-react'\n\nimport { TaskContext } from '../providers/TaskProvider';\nimport { GraphQLContext } from '../providers/GraphQLProvider';\n\n/**\n * Contains the graph components and modals\n * associated with each subtask/graph node\n */\nfunction BottomSegment() {\n    const { nodes, links } = useContext(TaskContext);\n    const { errorMessage } = useContext(GraphQLContext);\n\n    const renderMessage = (message) => {\n        if (message) {\n            return (\n                <Message negative>\n                    <Message.Header className='graphMessage'>\n                        {message}\n                    </Message.Header>\n                </Message>\n            );\n        }\n    }\n\n    const MyResponsiveNetwork = (nodes, links) => (\n\n        <div id='graphDiv'>\n            <ResponsiveNetwork\n                nodes={nodes}\n                links={links}\n                margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\n                repulsivity={1000}\n                iterations={60}\n                nodeColor={function (t) { return t.color }}\n                nodeBorderWidth={1}\n                nodeBorderColor={{ from: 'color', modifiers: [['darker', 0.8]] }}\n                linkThickness={function (t) { return 2 * (2 - t.source.depth) }}\n                motionStiffness={160}\n                motionDamping={12}\n            />\n            {renderMessage(errorMessage)}\n        </div>\n    );\n\n    return MyResponsiveNetwork(nodes, links);\n}\n\nexport default BottomSegment;","import React, { useContext, useState } from 'react';\n\nimport { AuthenticationContext } from './providers/AuthenticationProvider';\n\nimport LoginForm from './LoginForm';\nimport TopSegment from './topsegment/TopSegment';\nimport BottomSegment from './bottomsegment/BottomSegment';\n\nfunction App() {\n  const { authenticated, user: { id: userId } } = useContext(AuthenticationContext);\n\n  const loginView = () => {\n    return (\n      <LoginForm />\n    );\n  }\n\n  if (!authenticated) {\n    return loginView();\n  } else {\n    return (\n      <div>\n        <TopSegment\n          userId={userId}\n        />\n        <BottomSegment\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\n\n/**\n * Apollo config file\n * \n */\nconst httpLink = createHttpLink({\n    uri: 'https://newtimetracker-272513.appspot.com/graphql',\n  });\n  \n  const authLink = setContext((_, { headers }) => {\n    // get the authentication token from local storage if it exists\n    const token = localStorage.getItem('token');\n    // return the headers to the context so httpLink can read them\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : '',\n      }\n    }\n  });\n  \n  const client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n  });\n\n\n  export default client;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport { AuthenticationProvider } from './components/providers/AuthenticationProvider';\nimport { GraphQLProvider } from './components/providers/GraphQLProvider'\nimport { TaskProvider } from './components/providers/TaskProvider';\n\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport client from './Apollo';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <TaskProvider>\n      <AuthenticationProvider>\n        <GraphQLProvider>\n          <App />\n        </GraphQLProvider>\n      </AuthenticationProvider>\n    </TaskProvider>\n  </ApolloProvider>\n  ,\n  document.getElementById('root')\n);\n\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { motionPropTypes } from '@nivo/core'\nimport { inheritedColorPropType } from '@nivo/colors'\n\nconst commonPropTypes = {\n    nodes: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n        })\n    ).isRequired,\n    links: PropTypes.arrayOf(\n        PropTypes.shape({\n            source: PropTypes.string.isRequired,\n            target: PropTypes.string.isRequired,\n        })\n    ).isRequired,\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.oneOf(['links', 'nodes']), PropTypes.func])\n    ).isRequired,\n\n    linkDistance: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.number])\n        .isRequired,\n    repulsivity: PropTypes.number.isRequired,\n    distanceMin: PropTypes.number.isRequired,\n    distanceMax: PropTypes.number.isRequired,\n    iterations: PropTypes.number.isRequired,\n\n    nodeColor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    nodeBorderWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    nodeBorderColor: inheritedColorPropType.isRequired,\n\n    linkThickness: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    linkColor: inheritedColorPropType.isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n}\n\nexport const NetworkPropTypes = {\n    ...commonPropTypes,\n    ...motionPropTypes,\n}\n\nexport const NetworkCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    layers: ['links', 'nodes'],\n\n    linkDistance: 30,\n    repulsivity: 10,\n    distanceMin: 1,\n    distanceMax: Infinity,\n    iterations: 90,\n\n    nodeBorderWidth: 0,\n    nodeBorderColor: { from: 'color' },\n\n    linkThickness: 1,\n    linkColor: { from: 'source.color' },\n\n    isInteractive: true,\n}\n\nexport const NetworkDefaultProps = {\n    ...commonDefaultProps,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 15,\n}\n\nexport const NetworkCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio:\n        global.window && global.window.devicePixelRatio ? global.window.devicePixelRatio : 1,\n}\n"],"sourceRoot":""}